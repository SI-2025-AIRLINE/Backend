using System;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

namespace SIAirline.Migrations
{
    /// <inheritdoc />
    public partial class AddingData : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterDatabase()
                .Annotation("MySql:CharSet", "utf8mb4");

            migrationBuilder.CreateTable(
                name: "Aircrafts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    Model = table.Column<string>(type: "varchar(255)", maxLength: 255, nullable: false)
                        .Annotation("MySql:CharSet", "utf8mb4"),
                    Description = table.Column<string>(type: "varchar(255)", maxLength: 255, nullable: false)
                        .Annotation("MySql:CharSet", "utf8mb4"),
                    RegistrationNumber = table.Column<string>(type: "varchar(255)", maxLength: 255, nullable: false)
                        .Annotation("MySql:CharSet", "utf8mb4")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Aircrafts", x => x.Id);
                })
                .Annotation("MySql:CharSet", "utf8mb4");

            migrationBuilder.CreateTable(
                name: "Destinations",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    Name = table.Column<string>(type: "varchar(255)", maxLength: 255, nullable: false)
                        .Annotation("MySql:CharSet", "utf8mb4"),
                    CityCode = table.Column<string>(type: "varchar(255)", maxLength: 255, nullable: false)
                        .Annotation("MySql:CharSet", "utf8mb4"),
                    AirportCode = table.Column<string>(type: "varchar(3)", maxLength: 3, nullable: false)
                        .Annotation("MySql:CharSet", "utf8mb4"),
                    Status = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Destinations", x => x.Id);
                })
                .Annotation("MySql:CharSet", "utf8mb4");

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    FullName = table.Column<string>(type: "varchar(100)", maxLength: 100, nullable: false)
                        .Annotation("MySql:CharSet", "utf8mb4"),
                    PasswordHash = table.Column<string>(type: "varchar(255)", maxLength: 255, nullable: false)
                        .Annotation("MySql:CharSet", "utf8mb4"),
                    Email = table.Column<string>(type: "varchar(255)", maxLength: 255, nullable: false)
                        .Annotation("MySql:CharSet", "utf8mb4"),
                    Role = table.Column<int>(type: "int", nullable: false),
                    LastLogin = table.Column<DateTime>(type: "datetime(6)", nullable: true),
                    IsVerified = table.Column<bool>(type: "tinyint(1)", nullable: false),
                    VerificationToken = table.Column<string>(type: "varchar(100)", maxLength: 100, nullable: false)
                        .Annotation("MySql:CharSet", "utf8mb4"),
                    ResetToken = table.Column<string>(type: "varchar(100)", maxLength: 100, nullable: false)
                        .Annotation("MySql:CharSet", "utf8mb4")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.Id);
                })
                .Annotation("MySql:CharSet", "utf8mb4");

            migrationBuilder.CreateTable(
                name: "SeatingConfigs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    AircraftId = table.Column<int>(type: "int", nullable: false),
                    SeatClass = table.Column<int>(type: "int", nullable: false),
                    RowCount = table.Column<int>(type: "int", nullable: false),
                    SeatsPerRow = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SeatingConfigs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SeatingConfigs_Aircrafts_AircraftId",
                        column: x => x.AircraftId,
                        principalTable: "Aircrafts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                })
                .Annotation("MySql:CharSet", "utf8mb4");

            migrationBuilder.CreateTable(
                name: "Flights",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    FlightNumber = table.Column<string>(type: "varchar(20)", maxLength: 20, nullable: false)
                        .Annotation("MySql:CharSet", "utf8mb4"),
                    AircraftId = table.Column<int>(type: "int", nullable: false),
                    DepartureDestinationId = table.Column<int>(type: "int", nullable: false),
                    ArrivalDestinationId = table.Column<int>(type: "int", nullable: false),
                    DepartureTime = table.Column<DateTime>(type: "datetime(6)", nullable: false),
                    ArrivalTime = table.Column<DateTime>(type: "datetime(6)", nullable: false),
                    Status = table.Column<string>(type: "longtext", nullable: false)
                        .Annotation("MySql:CharSet", "utf8mb4"),
                    EconomyPrice = table.Column<float>(type: "float", nullable: false),
                    BusinessPrice = table.Column<float>(type: "float", nullable: false),
                    FirstClassPrice = table.Column<float>(type: "float", nullable: false),
                    Capacity = table.Column<int>(type: "int", nullable: false),
                    AvailableSeats = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Flights", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Flights_Aircrafts_AircraftId",
                        column: x => x.AircraftId,
                        principalTable: "Aircrafts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Flights_Destinations_ArrivalDestinationId",
                        column: x => x.ArrivalDestinationId,
                        principalTable: "Destinations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Flights_Destinations_DepartureDestinationId",
                        column: x => x.DepartureDestinationId,
                        principalTable: "Destinations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                })
                .Annotation("MySql:CharSet", "utf8mb4");

            migrationBuilder.InsertData(
                table: "Aircrafts",
                columns: new[] { "Id", "Description", "Model", "RegistrationNumber" },
                values: new object[,]
                {
                    { 1, "Fokker 100", "F100", "SM9XO" },
                    { 2, "BAe 146-100 Pax", "B461", "7MCIY" },
                    { 3, "BAe 146-200 Pax", "B462", "7GK8H" },
                    { 4, "BAe 146-300 Pax", "B463", "FQDBM" },
                    { 5, "Embraer E190-E2", "E290", "9I90V" },
                    { 6, "Embraer E195-E2", "E295", "YMYVE" },
                    { 7, "Airbus A220-100", "BCS1", "IEDIJ" },
                    { 8, "Airbus A220-200", "BCS3", "9RJ0W" },
                    { 9, "Airbus A310 all pax models", "A310", "YMR6O" },
                    { 10, "Airbus A318", "A318", "WJA86" },
                    { 11, "Airbus A319 Ceo", "A319", "GTEQR" },
                    { 12, "Airbus A319 Neo", "A19N", "24HRY" },
                    { 13, "Airbus A320-100/200 Ceo", "A320", "GWVOU" },
                    { 14, "Airbus A321-100/200 Ceo", "A321", "O91M5" },
                    { 15, "Airbus A321-200 Neo", "A21N", "W0VWR" },
                    { 16, "Airbus A330-200", "A332", "SN4W1" },
                    { 17, "Airbus A330-300", "A333", "7VXCH" },
                    { 18, "Airbus A340 all models", "A340", "UPFFA" },
                    { 19, "Airbus A340-200", "A342", "J0J59" },
                    { 20, "Airbus A340-300", "A343", "QU0GB" },
                    { 21, "Airbus A340-500", "A345", "K05EN" },
                    { 22, "Airbus A340-600", "A346", "8SSNZ" },
                    { 23, "Airbus A350-1000", "A35K", "0FN0B" },
                    { 24, "Airbus A380 pax", "A388", "Q4CK8" },
                    { 25, "Boeing 707-300 pax", "B703", "P0C4R" },
                    { 26, "Boeing 717", "B712", "WFNTZ" },
                    { 27, "Boeing 727-100 pax", "B721", "GRBOK" },
                    { 28, "Boeing 727-200 pax", "B722", "E4J3E" },
                    { 29, "Boeing 737-100 pax", "B731", "OO7PZ" },
                    { 30, "Boeing 737-200 pax", "B732", "EJWJ0" },
                    { 31, "Boeing 737-300 pax", "B733", "KFGET" },
                    { 32, "Boeing 737-400 pax", "B734", "DV1WT" },
                    { 33, "Boeing 737-500 pax", "B735", "IZ4LJ" },
                    { 34, "Boeing 737-600 pax", "B736", "9QW9P" },
                    { 35, "Boeing 737-800 pax", "B738", "S3PZB" },
                    { 36, "Boeing 737-900 pax", "B739", "FDX4F" },
                    { 37, "Boeing 737-700 pax", "B737", "MOR1P" },
                    { 38, "Boeing 747-100 pax", "B741", "EFQNS" },
                    { 39, "Boeing 747-200 pax", "B742", "F9PBH" },
                    { 40, "Boeing 747-300 pax", "B743", "84M1U" },
                    { 41, "Boeing 747-400 pax", "B744", "GQALF" },
                    { 42, "Boeing 747-8 pax", "B748", "SS67C" },
                    { 43, "Boeing 747SP", "N74S", "LNI5W" },
                    { 44, "Boeing 747SR pax", "B74R", "RGJ08" },
                    { 45, "Boeing 757-200 pax", "B752", "26AM0" },
                    { 46, "Boeing 757-300 pax", "B753", "8YR93" },
                    { 47, "Boeing 767-200 pax", "B762", "5G27C" },
                    { 48, "Boeing 767-300 pax", "B763", "IMUQA" },
                    { 49, "Boeing 767-400 pax", "B764", "3CVGE" },
                    { 50, "Boeing 777-200 pax", "B772", "H5ROZ" },
                    { 51, "Boeing 777-300 pax", "B773", "M3GHX" },
                    { 52, "Boeing 777-300ER pax", "B77W", "K9K0L" },
                    { 53, "Boeing 787-10 pax", "B78X", "JMF2H" },
                    { 54, "Boeing 787-8 pax", "B788", "WYRGH" },
                    { 55, "Boeing 787-9 pax", "B789", "0EERQ" },
                    { 56, "Boeing 737 MAX 7 pax", "B37M", "VUGDL" },
                    { 57, "Boeing 737 MAX 8 pax", "B38M", "ZIH9U" },
                    { 58, "Boeing 737 MAX 9 pax", "B39M", "DZLHG" },
                    { 59, "Antonov AN-22", "AN22", "4EHDP" },
                    { 60, "Antonov AN-26", "AN26", "4ADNS" },
                    { 61, "Antonov AN-28 / PZL Miele M-28 Skytruck", "AN28", "XOY94" },
                    { 62, "Antonov AN-30", "AN30", "P83QY" },
                    { 63, "Antonov AN-32", "AN32", "7ZU62" },
                    { 64, "Antonov AN-38", "AN38", "BRQ2K" },
                    { 65, "Antonov AN-148-100", "A148", "2P35G" },
                    { 66, "Airbus Industrie A300 pax", "A30B", "VHPUJ" },
                    { 67, "Airbus Industrie A300-600 pax", "A306", "7B76K" },
                    { 68, "Airbus Industrie A300-600ST Beluga Freighter", "A3ST", "ONYX9" },
                    { 69, "Gulfstream/Rockwell (Aero) Commander", "AC68", "BE9YE" },
                    { 70, "Gulfstream/Rockwell (Aero) Turbo Commander", "AC90", "R8KSX" },
                    { 71, "Antonov AN-24", "AN24", "9O079" },
                    { 72, "Antonov AN-72 / AN-74", "AN72", "8XDWU" },
                    { 73, "Antonov AN-12", "AN12", "80JPJ" },
                    { 74, "Avro RJ100 Avroliner", "RJ1H", "YZ9LU" },
                    { 75, "Avro RJ70 Avroliner", "RJ70", "MQ59W" },
                    { 76, "Avro RJ85 Avroliner", "RJ85", "I4GMC" },
                    { 77, "Aerospatiale/Alenia ATR 42-300 / 320", "AT43", "XV4BX" },
                    { 78, "Aerospatiale/Alenia ATR 42-500", "AT45", "2NQCE" },
                    { 79, "Aerospatiale/Alenia ATR 72", "AT72", "K8PFV" },
                    { 80, "Avro RJX100", "RX1H", "SH0KP" },
                    { 81, "Avro RJX85", "RX85", "N6Q66" },
                    { 82, "British Aerospace (BAC) One Eleven / RomBAC One Eleven", "BA11", "73IZ8" },
                    { 83, "Boeing 720B pax", "B720", "Q65AO" },
                    { 84, "Beechcraft 1900/1900C/1900D", "B190", "RWZQL" },
                    { 85, "Pilatus Britten-Norman BN-2A/B Islander", "BN2P", "VLTI9" },
                    { 86, "Pilatus Britten-Norman BN-2A Mk III Trislander", "TRIS", "ECZ70" },
                    { 87, "COMAC ARJ21", "AJ27", "ZQRFN" },
                    { 88, "Canadair Challenger", "CL60", "AGW6X" },
                    { 89, "Canadair Global Express", "GLEX", "QQ4E1" },
                    { 90, "Government Aircraft Factories N22B / N24A Nomad", "NOMA", "OWZO6" },
                    { 91, "Canadair CL-44", "CL44", "QPJNB" },
                    { 92, "Cessna 750 Citation X", "C750", "FPUYH" },
                    { 93, "Canadair Regional Jet 100", "CRJ1", "6RUFX" },
                    { 94, "Canadair Regional Jet 200", "CRJ2", "NQV9M" },
                    { 95, "Canadair Regional Jet 700", "CRJ7", "YNHVA" },
                    { 96, "Canadair Regional Jet 900", "CRJ9", "7I7W2" },
                    { 97, "Canadair Regional Jet 1000", "CRJX", "358GY" },
                    { 98, "Aerospatiale (Sud Aviation) Se.210 Caravelle", "S210", "QLWYD" },
                    { 99, "CASA / IPTN 212 Aviocar", "C212", "1F97E" },
                    { 100, "CASA / IPTN CN-235", "CN35", "QR19J" },
                    { 101, "Convair CV-240 pax", "CVLP", "HT5CE" },
                    { 102, "Convair CV-580 pax", "CVLT", "HEMZ6" },
                    { 103, "Douglas DC-10 pax", "DC10", "AMFQR" },
                    { 104, "Fairchild Dornier Do.228", "D228", "N61AU" },
                    { 105, "Fairchild Dornier Do.328", "D328", "JFTRX" },
                    { 106, "Douglas DC-8-50 Freighter", "DC85", "QKU2M" },
                    { 107, "Douglas DC-9-10 pax", "DC91", "LVJCS" },
                    { 108, "Douglas DC-3 pax", "DC3", "DOZ8H" },
                    { 109, "Douglas DC-4 pax", "DC4", "6CL4O" },
                    { 110, "Douglas DC6A/B pax", "DC6", "HPYH0" },
                    { 111, "De Havilland Canada DHC-8-100 Dash 8 / 8Q", "DH8A", "Q84D4" },
                    { 112, "De Havilland Canada DHC-8-200 Dash 8 / 8Q", "DH8B", "JSDG6" },
                    { 113, "De Havilland Canada DHC-8-300 Dash 8 / 8Q", "DH8C", "8RBHR" },
                    { 114, "De Havilland Canada DHC-8-400 Dash 8Q", "DH8D", "MP0R5" },
                    { 115, "De Havilland Canada DHC-7 Dash 7", "DHC7", "IIMJL" },
                    { 116, "De Havilland Canada DHC-4 Caribou", "DHC4", "2PCC3" },
                    { 117, "De Havilland DH.104 Dove", "DOVE", "SGSSB" },
                    { 118, "De Havilland DH.114 Heron", "HERN", "HT3EM" },
                    { 119, "De Havilland Canada DHC-3 Turbo Otter", "DHC3", "0Q1VB" },
                    { 120, "De Havilland Canada DHC-2 Beaver", "DHC2", "WEGKE" },
                    { 121, "De Havilland Canada DHC-2 Turbo-Beaver", "DH2T", "RMXN0" },
                    { 122, "De Havilland Canada DHC-6 Twin Otter", "DHC6", "V3SH9" },
                    { 123, "Embraer 170", "E170", "CD2A1" },
                    { 124, "Embraer 190", "E190", "0MTSB" },
                    { 125, "Eurocopter EC.130", "EC30", "GIG21" },
                    { 126, "Embraer 175 (Short wing)", "E75S", "F4VVQ" },
                    { 127, "Embraer 175 (Long Wing)", "E75L", "4T0DQ" },
                    { 128, "Embraer 195", "E195", "R5MMU" },
                    { 129, "Embraer EMB.120 Brasilia", "E120", "HWC4O" },
                    { 130, "Embraer EMB.110 Bandeirnate", "E110", "WQSTP" },
                    { 131, "Embraer RJ135", "E135", "61VPO" },
                    { 132, "Embraer Legacy 600 / Legacy 650", "E35L", "YJOE2" },
                    { 133, "Embraer RJ145 Amazon", "E145", "U9VRG" },
                    { 134, "Fokker F.28 Fellowship 1000", "F28", "WY5D7" },
                    { 135, "Fokker F.27 Friendship / Fairchild F.27", "F27", "07VD9" },
                    { 136, "Fokker 50", "F50", "AADC7" },
                    { 137, "Fokker 70", "F70", "UYUCL" },
                    { 138, "Fairchild FH.227", "FH227", "VWHCH" },
                    { 139, "Fairchild Dornier 328JET", "J328", "P5HJT" },
                    { 140, "Grumman G.73 Turbo Mallard", "G73T", "NTPVX" },
                    { 141, "Gulfstream Aerospace G-159 Gulfstream I", "G159", "MQDVM" },
                    { 142, "Helio H-250 Courier / H-295 / 385 Super Courier", "COUC", "7T3T5" },
                    { 143, "Hawker Siddeley HS.748", "A748", "DCZ6N" },
                    { 144, "Ilyushin IL114", "I114", "RMIOQ" },
                    { 145, "Ilyushin IL96-300 pax", "IL96", "WHF9P" },
                    { 146, "Ilyushin IL62", "IL62", "Y766N" },
                    { 147, "Ilyushin IL76", "IL76", "HEM9I" },
                    { 148, "Ilyushin IL18", "IL18", "OJVFA" },
                    { 149, "British Aerospace Jetstream 31", "JS31", "FDCIH" },
                    { 150, "British Aerospace Jetstream 32", "JS32", "SVYVM" },
                    { 151, "British Aerospace Jetstream 41", "JS41", "XKLH4" },
                    { 152, "Junkers Ju52/3M", "JU52", "PUY4P" },
                    { 153, "Lockheed L-1011 Tristar pax", "L101", "670U0" },
                    { 154, "Lockheed L-1049 Super Constellation", "CONI", "UYIGH" },
                    { 155, "LET 410", "L410", "LJBNV" },
                    { 156, "Lockheed L-188 Electra pax", "L188", "ICYFL" },
                    { 157, "Lockheed L-182 / 282 / 382 (L-100) Hercules", "C130", "K9HMT" },
                    { 158, "McDonnell Douglas MD11 pax", "MD11", "1SM7I" },
                    { 159, "McDonnell Douglas MD80", "MD80", "WLG8I" },
                    { 160, "Eurocopter (MBB) Bo.105", "B105", "5RZDV" },
                    { 161, "MD Helicopters MD900 Explorer", "EXPL", "F3V1I" },
                    { 162, "MIL Mi-8 / Mi-17 / Mi-171 / Mil-172", "MI8", "PNLUI" },
                    { 163, "Mitsubishi Mu-2", "MU2", "E2W4P" },
                    { 164, "Aerospatiale (Nord) 262", "ND2", "BIOXK" },
                    { 165, "Aerospatiale SN.601 Corvette", "NDC", "KSAD6" },
                    { 166, "Airbus A320-200 Neo", "A20N", "4ZR14" },
                    { 167, "Airbus A330 all models", "A330", "SS40G" },
                    { 168, "Airbus A330-800 Neo", "A338", "6DPAB" },
                    { 169, "Airbus A330-900 Neo", "A339", "I1AAP" },
                    { 170, "Airbus A350-900", "A359", "EZ072" },
                    { 171, "Antonov AN-140", "A140", "Q5R3B" },
                    { 172, "Antonov AN-124 Ruslan", "A124", "MZBM1" },
                    { 173, "Antonov AN-225", "A225", "4GBE1" }
                });

            migrationBuilder.InsertData(
                table: "Destinations",
                columns: new[] { "Id", "AirportCode", "CityCode", "Name", "Status" },
                values: new object[,]
                {
                    { 1, "AAL", "AAL", "Aalborg", 0 },
                    { 2, "AAR", "AAR", "Aarhus", 0 },
                    { 3, "ABD", "ABD", "Abadan", 0 },
                    { 4, "ABA", "ABA", "Abakan", 0 },
                    { 5, "ABR", "ABR", "Aberdeen", 0 },
                    { 6, "ABZ", "ABZ", "Aberdeen", 0 },
                    { 7, "AHB", "AHB", "Abha", 0 },
                    { 8, "AUH", "AUH", "Abu Dhabi", 0 },
                    { 9, "ABJ", "ABJ", "Abidjan", 0 },
                    { 10, "ABI", "ABI", "Abilene", 0 },
                    { 11, "ABV", "ABV", "Abuja", 0 },
                    { 12, "ACA", "ACA", "Acapulco", 0 },
                    { 13, "AGV", "AGV", "Acarigua", 0 },
                    { 14, "ACC", "ACC", "Accra", 0 },
                    { 15, "ADK", "ADK", "Adak Island", 0 },
                    { 16, "ADA", "ADA", "Adana", 0 },
                    { 17, "ADD", "ADD", "Addis Ababa", 0 },
                    { 18, "ADL", "ADL", "Adelaide", 0 },
                    { 19, "ADE", "ADE", "Aden", 0 },
                    { 20, "AER", "AER", "Adler", 0 },
                    { 21, "AGA", "AGA", "Agadir", 0 },
                    { 22, "AGU", "AGU", "Aguascaliente", 0 },
                    { 23, "AMD", "AMD", "Ahmedabad", 0 },
                    { 24, "AJA", "AJA", "Ajaccio", 0 },
                    { 25, "KKI", "KKI", "Akiachak", 0 },
                    { 26, "AKI", "AKI", "Akiak", 0 },
                    { 27, "AXT", "AXT", "Akita", 0 },
                    { 28, "CAK", "CAK", "Akron/Canton", 0 },
                    { 29, "ABT", "ABT", "Al-Baha", 0 },
                    { 30, "FJR", "FJR", "Al-Fujairah", 0 },
                    { 31, "ABY", "ABY", "Albany", 0 },
                    { 32, "ALB", "ALB", "Albany", 0 },
                    { 33, "YAL", "YAL", "Albert Bay", 0 },
                    { 34, "ABQ", "ABQ", "Albuquerque", 0 },
                    { 35, "AXD", "AXD", "Aleandroupolis", 0 },
                    { 36, "ALP", "ALP", "Aleppo", 0 },
                    { 37, "ESF", "ESF", "Alexandria", 0 },
                    { 38, "ALG", "ALG", "Algiers", 0 },
                    { 39, "ALC", "ALC", "Alicante", 0 },
                    { 40, "AET", "AET", "Allakaket", 0 },
                    { 41, "ABE", "ABE", "Allentown", 0 },
                    { 42, "ALA", "ALA", "Alma Ata", 0 },
                    { 43, "AOR", "AOR", "Alor Setar", 0 },
                    { 44, "AOO", "AOO", "Altoona", 0 },
                    { 45, "AMA", "AMA", "Amarillo", 0 },
                    { 46, "AHT", "AHT", "Amchitka", 0 },
                    { 47, "AMM", "AMM", "Amman", 0 },
                    { 48, "ATQ", "ATQ", "Amritsar", 0 },
                    { 49, "AMS", "AMS", "Amsterdam", 0 },
                    { 50, "SPL", "AMS", "Amsterdam, Schiphol Airport", 0 },
                    { 51, "BGW", "BGW", "Baghdad, Al Muthana", 0 },
                    { 52, "SDA", "BGW", "Baghdad, Saddam International", 0 },
                    { 53, "BAH", "BAH", "Bahrain", 0 },
                    { 54, "BFL", "BFL", "Bakersfield", 0 },
                    { 55, "DPS", "DPS", "Bali Island, Denpasar", 0 },
                    { 56, "BBA", "BBA", "Balmaceda", 0 },
                    { 57, "BWI", "BWI", "Baltimore", 0 },
                    { 58, "MTN", "BWI", "Baltimore, Gl. Martin", 0 },
                    { 59, "BKO", "BKO", "Bamako", 0 },
                    { 60, "BND", "BND", "Bandar Abbas", 0 },
                    { 61, "BWN", "BWN", "Bandar Seri Bagawan", 0 },
                    { 62, "BLR", "BLR", "Bangalore", 0 },
                    { 63, "BKK", "BKK", "Bangkok", 0 },
                    { 64, "BGR", "BGR", "Bangor", 0 },
                    { 65, "BGF", "BGF", "Bangui", 0 },
                    { 66, "BJL", "BJL", "Banjul", 0 },
                    { 67, "BAV", "BAV", "Baotou", 0 },
                    { 68, "BGI", "BGI", "Barbados", 0 },
                    { 69, "BCN", "BCN", "Barcelona", 0 },
                    { 70, "BLA", "BLA", "Barcelona", 0 },
                    { 71, "BDU", "BDU", "Bardufoss", 0 },
                    { 72, "BRI", "BRI", "Bari", 0 },
                    { 73, "BNS", "BNS", "Barinas", 0 },
                    { 74, "BRM", "BRM", "Barquisimeto", 0 },
                    { 75, "BAQ", "BAQ", "Barranquilla", 0 },
                    { 76, "BRW", "BRW", "Barrow", 0 },
                    { 77, "BSL", "BSL", "Basle", 0 },
                    { 78, "BSR", "BSR", "Basra", 0 },
                    { 79, "BIA", "BIA", "Bastia", 0 },
                    { 80, "BIK", "BIA", "Bastia, Biak", 0 },
                    { 81, "BTR", "BTR", "Baton Rouge", 0 },
                    { 82, "BTL", "BTL", "Battle Creek", 0 },
                    { 83, "MBS", "MBS", "Bay City/Saginaw", 0 },
                    { 84, "BPT", "BPT", "Beaumont", 0 },
                    { 85, "WBQ", "WBQ", "Beaver", 0 },
                    { 86, "EIS", "EIS", "Beef Island, Tortola", 0 },
                    { 87, "BJS", "BJS", "Beijing", 0 },
                    { 88, "PEK", "BJS", "Beijing", 0 },
                    { 89, "NAY", "BJS", "Beijing, Nanyuan Airport", 0 },
                    { 90, "BEW", "BEW", "Beira", 0 },
                    { 91, "BEY", "BEY", "Beirut", 0 },
                    { 92, "BEL", "BEL", "Belem", 0 },
                    { 93, "BFS", "BFS", "Belfast", 0 },
                    { 94, "BHD", "BFS", "Belfast, Belfast City", 0 },
                    { 95, "BEG", "BEG", "Belgrade", 0 },
                    { 96, "BZE", "BZE", "Belize", 0 },
                    { 97, "TZA", "BZE", "Belize, Municipal", 0 },
                    { 98, "BLI", "BLI", "Bellingham", 0 },
                    { 99, "BHZ", "BHZ", "Belo Horizonte", 0 },
                    { 100, "BEN", "BEN", "Benghazi", 0 },
                    { 101, "BGO", "BGO", "Bergen", 0 },
                    { 102, "BER", "BER", "Berlin", 0 },
                    { 103, "SXF", "SXF", "Berlin, Schonefeld", 0 },
                    { 104, "TXL", "BER", "Berlin, Tegel", 0 },
                    { 105, "THF", "BER", "Berlin, Tempelhof", 0 },
                    { 106, "BDA", "BDA", "Bermuda", 0 },
                    { 107, "BRN", "BRN", "Bern", 0 },
                    { 108, "BET", "BET", "Bethel", 0 },
                    { 109, "BTT", "BTT", "Bettles", 0 },
                    { 110, "CNS", "CNS", "Cairns", 0 },
                    { 111, "CAI", "CAI", "Cairo", 0 },
                    { 112, "CJA", "CJA", "Cajamarca", 0 },
                    { 113, "CJC", "CJC", "Calama", 0 },
                    { 114, "CCU", "CCU", "Calcutta", 0 },
                    { 115, "YYC", "YYC", "Calgary", 0 },
                    { 116, "CLO", "CLO", "Cali", 0 },
                    { 117, "CCJ", "CCJ", "Calicut", 0 },
                    { 118, "CLY", "CLY", "Calvi", 0 },
                    { 119, "YCB", "YCB", "Cambridge Bay", 0 },
                    { 120, "CGR", "CGR", "Campo Grande", 0 },
                    { 121, "CAJ", "CAJ", "Canaima", 0 },
                    { 122, "CUN", "CUN", "Cancun", 0 },
                    { 123, "CGI", "CGI", "Cape Girardeau", 0 },
                    { 124, "CPT", "CPT", "Cape Town", 0 },
                    { 125, "CCS", "CCS", "Caracas", 0 },
                    { 126, "CWL", "CWL", "Cardiff", 0 },
                    { 127, "CNM", "CNM", "Carlsbad", 0 },
                    { 128, "CTG", "CTG", "Cartagena", 0 },
                    { 129, "CUP", "CUP", "Carupano", 0 },
                    { 130, "AAA", "CAS", "Casablanca", 0 },
                    { 131, "CMN", "CAS", "Casablanca, Mohamed V", 0 },
                    { 132, "CAS", "CAS", "Casablanca, Anfa", 0 },
                    { 133, "CPR", "CPR", "Casper", 0 },
                    { 134, "CTA", "CTA", "Catania", 0 },
                    { 135, "CAY", "CAY", "Cayenne", 0 },
                    { 136, "CEB", "CEB", "Cebu", 0 },
                    { 137, "CDC", "CDC", "Cedar City", 0 },
                    { 138, "CID", "CID", "Cedar Rapids / Iowa City", 0 },
                    { 139, "CHH", "CHH", "Chachapoyas", 0 },
                    { 140, "CIK", "CIK", "Chalkyits", 0 },
                    { 141, "CMI", "CMI", "Champaign", 0 },
                    { 142, "CGQ", "CGQ", "Changchun", 0 },
                    { 143, "CSX", "CSX", "Changsha", 0 },
                    { 144, "CHS", "CHS", "Charleston", 0 },
                    { 145, "CLT", "CLT", "Charlotte", 0 },
                    { 146, "CHA", "CHA", "Chattanooga", 0 },
                    { 147, "CYF", "CYF", "Chefornak", 0 },
                    { 148, "CJU", "CJU", "Cheju", 0 },
                    { 149, "CTU", "CTU", "Chengdu", 0 },
                    { 150, "CTM", "CTM", "Chetumal", 0 },
                    { 151, "VAK", "VAK", "Chevak", 0 },
                    { 152, "CNX", "CNX", "Chiang Mai", 0 },
                    { 153, "CHI", "CHI", "Chicago", 0 },
                    { 154, "CGX", "CHI", "Chicago, Merill C. Meigs", 0 },
                    { 155, "MDW", "CHI", "Chicago, Midway", 0 },
                    { 156, "ORD", "CHI", "Chicago, O’Hare", 0 },
                    { 157, "CZA", "CZA", "Chichenitza", 0 },
                    { 158, "CIX", "CIX", "Chiclayo", 0 },
                    { 159, "CIC", "CIC", "Chico", 0 },
                    { 160, "KCL", "KCL", "Chignik", 0 },
                    { 161, "CUU", "CUU", "Chihuahua", 0 },
                    { 162, "HIB", "HIB", "Chisholm", 0 },
                    { 163, "CGP", "CGP", "Chittagong", 0 },
                    { 164, "DKR", "DKR", "Dakar", 0 },
                    { 165, "DLM", "DLM", "Dalaman", 0 },
                    { 166, "DLC", "DLC", "Dalian", 0 },
                    { 167, "DFW", "DFW", "Dallas/Ft. Worth", 0 },
                    { 168, "DAL", "DAL", "Dallas, Love Field", 0 },
                    { 169, "DAM", "DAM", "Damascus", 0 },
                    { 170, "DNV", "DNV", "Danville", 0 },
                    { 171, "DAR", "DAR", "Dar Es Salaam", 0 },
                    { 172, "DRW", "DRW", "Darwin", 0 },
                    { 173, "DVO", "DVO", "Davao", 0 },
                    { 174, "DAY", "DAY", "Dayton", 0 },
                    { 175, "DAB", "DAB", "Daytona Beach", 0 },
                    { 176, "DEC", "DEC", "Decatur", 0 },
                    { 177, "YDF", "YDF", "Deer Lake", 0 },
                    { 178, "DEL", "DEL", "Delhi", 0 },
                    { 179, "DTA", "DTA", "Delta", 0 },
                    { 180, "DEN", "DEN", "Denver", 0 },
                    { 181, "DSM", "DSM", "Des Moines", 0 },
                    { 182, "DTT", "DTT", "Detroit", 0 },
                    { 183, "DTW", "DTT", "Detroit", 0 },
                    { 184, "DET", "DTT", "Detroit City", 0 },
                    { 185, "YIP", "DTT", "Detroit, Willow Run", 0 },
                    { 186, "DHA", "DHA", "Dhahran", 0 },
                    { 187, "ELS", "ELS", "East London", 0 },
                    { 188, "EMA", "EMA", "East Midlands", 0 },
                    { 189, "IPC", "IPC", "Easter Island", 0 },
                    { 190, "EDI", "EDI", "Edinburgh", 0 },
                    { 191, "YEA", "YEA", "Edmonton", 0 },
                    { 192, "YEG", "YEA", "Edmonton, Albert Int’l", 0 },
                    { 193, "YXD", "YEA", "Edmonton, Municipal", 0 },
                    { 194, "YED", "YEA", "Edmonton, Namao Field", 0 },
                    { 195, "EEK", "EEK", "Eek", 0 },
                    { 196, "VPS", "VPS", "Eglin Afb/Valparaiso", 0 },
                    { 197, "EIN", "EIN", "Eindhoven", 0 },
                    { 198, "ELP", "ELP", "El Paso", 0 },
                    { 199, "ESR", "ESR", "El Salvador", 0 },
                    { 200, "ETH", "ETH", "Elat", 0 },
                    { 201, "EKO", "EKO", "Elko", 0 },
                    { 202, "ELY", "ELY", "Ely", 0 },
                    { 203, "FAI", "FAI", "Fairbanks", 0 },
                    { 204, "EWB", "EWB", "Fall River, New Bedford", 0 },
                    { 205, "KFP", "KFP", "False Pass", 0 },
                    { 206, "FAR", "FAR", "Fargo", 0 },
                    { 207, "FAO", "FAO", "Faro", 0 },
                    { 208, "FAY", "FAY", "Fayetteville", 0 },
                    { 209, "FYV", "FYV", "Fayetteville", 0 },
                    { 210, "FEZ", "FEZ", "Fez", 0 },
                    { 211, "FIL", "FIL", "Fillmore", 0 },
                    { 212, "FLG", "FLG", "Flagstaff", 0 },
                    { 213, "MEM", "MEM", "Memphis", 0 },
                    { 214, "FNT", "FNT", "Flint", 0 },
                    { 215, "FLR", "FLR", "Florence", 0 },
                    { 216, "MSL", "MSL", "Florence", 0 },
                    { 217, "FRS", "FRS", "Flores", 0 },
                    { 218, "YVP", "YVP", "Fort Chima", 0 },
                    { 219, "FMY", "FMY", "Fort Myers", 0 },
                    { 220, "YYE", "YYE", "Fort Nelson", 0 },
                    { 221, "YXJ", "YXJ", "Fort St. John", 0 },
                    { 222, "FOR", "FOR", "Fortaleza", 0 },
                    { 223, "GNV", "GNV", "Gainesvile", 0 },
                    { 224, "GAL", "GAL", "Galena", 0 },
                    { 225, "GOU", "GOU", "Garoua", 0 },
                    { 226, "ELQ", "ELQ", "Gassim", 0 },
                    { 227, "GAU", "GAU", "Gauhati", 0 },
                    { 228, "GMA", "GMA", "Gemena", 0 },
                    { 229, "GVA", "GVA", "Geneva", 0 },
                    { 230, "GOA", "GOA", "Genoa", 0 },
                    { 231, "GGG", "GGG", "Gladewater, Longview", 0 },
                    { 232, "GLA", "GLA", "Glasgow", 0 },
                    { 233, "PIK", "GLA", "Glasgow, Prestwick", 0 },
                    { 234, "GOM", "GOM", "Goma", 0 },
                    { 235, "GNU", "GNU", "Goodnew Bay", 0 },
                    { 236, "YYR", "YYR", "Goose Bay", 0 },
                    { 237, "GKA", "GKA", "Goroka", 0 },
                    { 238, "GOT", "GOT", "Gothenburg", 0 },
                    { 239, "LPA", "LPA", "Gran Canaria", 0 },
                    { 240, "GCM", "GCM", "Grand Cayman", 0 },
                    { 241, "GFK", "GFK", "Grand Fork", 0 },
                    { 242, "GRR", "GRR", "Grand Rapids", 0 },
                    { 243, "GDT", "GDT", "Grand Turk", 0 },
                    { 244, "YQU", "YQU", "Grande Prairie", 0 },
                    { 245, "KGX", "KGX", "Grayling", 0 },
                    { 246, "GRZ", "GRZ", "Graz", 0 },
                    { 247, "HAG", "HAG", "Hagen", 0 },
                    { 248, "HAK", "HAK", "Haikou", 0 },
                    { 249, "HAS", "HAS", "Hail", 0 },
                    { 250, "HKD", "HKD", "Hakodate", 0 },
                    { 251, "YHZ", "YHZ", "Halifax", 0 },
                    { 252, "YUX", "YUX", "Hall Beach", 0 },
                    { 253, "HAM", "HAM", "Hamburg", 0 },
                    { 254, "YHM", "YHM", "Hamilton", 0 },
                    { 255, "PHF", "PHF", "Hampton / Williamsburg", 0 },
                    { 256, "HGH", "HGH", "Hangzhou", 0 },
                    { 257, "HAN", "HAN", "Hanoi", 0 },
                    { 258, "HAJ", "HAJ", "Hanover", 0 },
                    { 259, "HRE", "HRE", "Harare", 0 },
                    { 260, "HRB", "HRB", "Harbin", 0 },
                    { 261, "HRL", "HRL", "Harlingen", 0 },
                    { 262, "HAR", "HAR", "Harrisburg", 0 },
                    { 263, "HFD", "HFD", "Hartford", 0 },
                    { 264, "BNH", "HFD", "Hartford, Barnes", 0 },
                    { 265, "BDL", "HFD", "Hartford, Bradford", 0 },
                    { 266, "HDY", "HDY", "Hat Yai", 0 },
                    { 267, "HAU", "HAU", "Haugesund", 0 },
                    { 268, "HAV", "HAV", "Havana", 0 },
                    { 269, "YHY", "YHY", "Hay River", 0 },
                    { 270, "HFE", "HFE", "Hefei", 0 },
                    { 271, "HLN", "HLN", "Helena", 0 },
                    { 272, "AGH", "AGH", "Helsingborg", 0 },
                    { 273, "HEL", "HEL", "Helsinki", 0 },
                    { 274, "HER", "HER", "Heraklion", 0 },
                    { 275, "HMO", "HMO", "Hermosillo", 0 },
                    { 276, "IGU", "IGU", "Iguassu Falls", 0 },
                    { 277, "ILI", "ILI", "Iliamna", 0 },
                    { 278, "IND", "IND", "Indianapolis", 0 },
                    { 279, "INN", "INN", "Innsbruck", 0 },
                    { 280, "YEV", "YEV", "Inuvik", 0 },
                    { 281, "IPH", "IPH", "Ipoh", 0 },
                    { 282, "YFB", "YFB", "Iqaluit", 0 },
                    { 283, "IQQ", "IQQ", "Iquique", 0 },
                    { 284, "IMT", "IMT", "Iron Mountain", 0 },
                    { 285, "IFN", "IFN", "Isfahan", 0 },
                    { 286, "IRP", "IRP", "Isiro", 0 },
                    { 287, "ISB", "ISB", "Islamabad", 0 },
                    { 288, "ISC", "ISC", "Isles of Scil, St. Mary’s", 0 },
                    { 289, "TSO", "ISC", "Isles of Scil, Tresco", 0 },
                    { 290, "JAC", "JAC", "Jackson", 0 },
                    { 291, "JAN", "JAN", "Jackson", 0 },
                    { 292, "JAX", "JAX", "Jacksonville", 0 },
                    { 293, "JAI", "JAI", "Jaipur", 0 },
                    { 294, "CGK", "JKT", "Jakarta", 0 },
                    { 295, "JKT", "JKT", "Jakarta", 0 },
                    { 296, "HLP", "JKT", "Jakarta, Halim Perdana Kusuma", 0 },
                    { 297, "JVL", "JVL", "Janesville", 0 },
                    { 298, "JED", "JED", "Jeddah", 0 },
                    { 299, "JER", "JER", "Jersey", 0 },
                    { 300, "KBL", "KBL", "Kabul", 0 },
                    { 301, "KAD", "KAD", "Kaduna", 0 },
                    { 302, "KOJ", "KOJ", "Kagoshima", 0 },
                    { 303, "OGG", "OGG", "Kahului", 0 },
                    { 304, "KOA", "KOA", "Kailua", 0 },
                    { 305, "AZO", "AZO", "Kalamazoo", 0 },
                    { 306, "FCA", "FCA", "Kalispell", 0 },
                    { 307, "KLG", "KLG", "Kalskag", 0 },
                    { 308, "KAL", "KAL", "Kaltag", 0 },
                    { 309, "KNB", "KNB", "Kanab", 0 },
                    { 310, "KGA", "KGA", "Kananga", 0 },
                    { 311, "KAN", "KAN", "Kano", 0 },
                    { 312, "MKC", "MKC", "Kansas City", 0 },
                    { 313, "MCI", "MKC", "Kansas City, International", 0 },
                    { 314, "KHH", "KHH", "Kaohsiung", 0 },
                    { 315, "KHI", "KHI", "Karachi", 0 },
                    { 316, "KGF", "KGF", "Karaganda", 0 },
                    { 317, "KRP", "KRP", "Karup", 0 },
                    { 318, "KUK", "KUK", "Kasigluk", 0 },
                    { 319, "KSF", "KSF", "Kassel", 0 },
                    { 320, "KTM", "KTM", "Kathmandu", 0 },
                    { 321, "LIH", "LIH", "Kauai Is", 0 },
                    { 322, "ENA", "ENA", "Kenai", 0 },
                    { 323, "KER", "KER", "Kerman", 0 },
                    { 324, "KTN", "KTN", "Ketchikan", 0 },
                    { 325, "KHV", "KHV", "Khabarovsk", 0 },
                    { 326, "IEV", "IEV", "Kiev", 0 },
                    { 327, "KBP", "IEV", "Kiev, Borispol", 0 },
                    { 328, "KGL", "KGL", "Kigali", 0 },
                    { 329, "JRO", "JRO", "Kilimanjaro", 0 },
                    { 330, "ILE", "ILE", "Killeen", 0 },
                    { 331, "KIM", "KIM", "Kimberley", 0 },
                    { 332, "KND", "KND", "Kindu", 0 },
                    { 333, "LCE", "LCE", "La Ceiba", 0 },
                    { 334, "LSE", "LSE", "La Crosse", 0 },
                    { 335, "YGL", "YGL", "La Grande", 0 },
                    { 336, "LPB", "LPB", "La Paz", 0 },
                    { 337, "LAP", "LAP", "La Paz Mex", 0 },
                    { 338, "LBU", "LBU", "Labuan", 0 },
                    { 339, "LAE", "LAE", "Lae", 0 },
                    { 340, "LFT", "LFT", "Lafayette", 0 },
                    { 341, "LOS", "LOS", "Lagos", 0 },
                    { 342, "SNA", "SNA", "Laguna Beach / Sant Ana", 0 },
                    { 343, "LDU", "LDU", "Lahad Datu", 0 },
                    { 344, "LHE", "LHE", "Lahore", 0 },
                    { 345, "LCH", "LCH", "Lake Charles", 0 },
                    { 346, "LNY", "LNY", "Lanai City", 0 },
                    { 347, "LGK", "LGK", "Langkawi", 0 },
                    { 348, "LAN", "LAN", "Lansing", 0 },
                    { 349, "LHW", "LHW", "Lanzhou", 0 },
                    { 350, "LRD", "LRD", "Laredo", 0 },
                    { 351, "LCA", "LCA", "Larnaca", 0 },
                    { 352, "LSP", "LSP", "Las Piedras", 0 },
                    { 353, "LAS", "LAS", "Las Vegas", 0 },
                    { 354, "VGT", "LAS", "Las Vegas, North Air Terminal", 0 },
                    { 355, "LST", "LST", "Launceston", 0 },
                    { 356, "LAW", "LAW", "Lawton", 0 },
                    { 357, "LEH", "LEH", "Le Havre", 0 },
                    { 358, "LBA", "LBA", "Leeds", 0 },
                    { 359, "LER", "LER", "Leinster", 0 },
                    { 360, "LEJ", "LEJ", "Leipzig", 0 },
                    { 361, "YQL", "YQL", "Lethbridge", 0 },
                    { 362, "LXA", "LXA", "Lhasa", 0 },
                    { 363, "LBV", "LBV", "Libreville", 0 },
                    { 364, "LGG", "LGG", "Liege", 0 },
                    { 365, "LIL", "LIL", "Lille", 0 },
                    { 366, "LLW", "LLW", "Lilongwe", 0 },
                    { 367, "LIM", "LIM", "Lima", 0 },
                    { 368, "LIG", "LIG", "Limoges", 0 },
                    { 369, "LNK", "LNK", "Lincoln", 0 },
                    { 370, "LNZ", "LNZ", "Linz", 0 },
                    { 371, "MST", "MST", "Maastricht", 0 },
                    { 372, "MCN", "MCN", "Macon", 0 },
                    { 373, "MSN", "MSN", "Madison", 0 },
                    { 374, "MAA", "MAA", "Madras", 0 },
                    { 375, "MAD", "MAD", "Madrid", 0 },
                    { 376, "GDX", "GDX", "Magadan", 0 },
                    { 377, "SEZ", "SEZ", "Mahe Island", 0 },
                    { 378, "MIU", "MIU", "Maiduguri", 0 },
                    { 379, "MAJ", "MAJ", "Majuro", 0 },
                    { 380, "AGP", "AGP", "Malaga", 0 },
                    { 381, "MLE", "MLE", "Male", 0 },
                    { 382, "MMA", "MMA", "Malmo", 0 },
                    { 383, "MAL", "MAL", "Malongo", 0 },
                    { 384, "MLA", "MLA", "Malta", 0 },
                    { 385, "MDC", "MDC", "Manado", 0 },
                    { 386, "MGA", "MGA", "Managua", 0 },
                    { 387, "MAO", "MAO", "Manaus", 0 },
                    { 388, "MAN", "MAN", "Manchester", 0 },
                    { 389, "MHT", "MHT", "Manchester", 0 },
                    { 390, "MNL", "MNL", "Manila", 0 },
                    { 391, "ZLO", "ZLO", "Manzanillo", 0 },
                    { 392, "MPM", "MPM", "Maputo", 0 },
                    { 393, "MAR", "MAR", "Maracaibo", 0 },
                    { 394, "MBX", "MBX", "Maribor", 0 },
                    { 395, "PKB", "PKB", "Marietta, Parkersburg", 0 },
                    { 396, "MWA", "MWA", "Marion", 0 },
                    { 397, "MQT", "MQT", "Marquette", 0 },
                    { 398, "RAK", "RAK", "Marrakech", 0 },
                    { 399, "MRS", "MRS", "Marseille", 0 },
                    { 400, "MLL", "MLL", "Marshall", 0 },
                    { 401, "MVY", "MVY", "Martha’s Vineyard", 0 },
                    { 402, "MHD", "MHD", "Mashad", 0 },
                    { 403, "MAM", "MAM", "Matamoros", 0 },
                    { 404, "MYJ", "MYJ", "Matsuyama", 0 },
                    { 405, "MUN", "MUN", "Maturin", 0 },
                    { 406, "MRU", "MRU", "Mauritius", 0 },
                    { 407, "MAZ", "MAZ", "Mayaguez", 0 },
                    { 408, "MZT", "MZT", "Mazatlan", 0 },
                    { 409, "MDK", "MDK", "Mbandaka", 0 },
                    { 410, "MJM", "MJM", "Mbuji Mayi", 0 },
                    { 411, "MFE", "MFE", "Mc Allen", 0 },
                    { 412, "MCG", "MCG", "Mc Grath", 0 },
                    { 413, "MES", "MES", "Medan", 0 },
                    { 414, "MDE", "MDE", "Medellin", 0 },
                    { 415, "MFR", "MFR", "Medford", 0 },
                    { 416, "MED", "MED", "Medina", 0 },
                    { 417, "MKR", "MKR", "Meekatharp", 0 },
                    { 418, "MYU", "MYU", "Mekoryuk", 0 },
                    { 419, "MEL", "MEL", "Melbourne", 0 },
                    { 420, "MLB", "MLB", "Melbourne", 0 },
                    { 421, "KAH", "MEL", "Melbourne, City Heliport", 0 },
                    { 422, "MEB", "MEL", "Melbourne, Essendon", 0 }
                });

            migrationBuilder.CreateIndex(
                name: "IX_Flights_AircraftId",
                table: "Flights",
                column: "AircraftId");

            migrationBuilder.CreateIndex(
                name: "IX_Flights_ArrivalDestinationId",
                table: "Flights",
                column: "ArrivalDestinationId");

            migrationBuilder.CreateIndex(
                name: "IX_Flights_DepartureDestinationId",
                table: "Flights",
                column: "DepartureDestinationId");

            migrationBuilder.CreateIndex(
                name: "IX_SeatingConfigs_AircraftId",
                table: "SeatingConfigs",
                column: "AircraftId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Flights");

            migrationBuilder.DropTable(
                name: "SeatingConfigs");

            migrationBuilder.DropTable(
                name: "Users");

            migrationBuilder.DropTable(
                name: "Destinations");

            migrationBuilder.DropTable(
                name: "Aircrafts");
        }
    }
}
